{"version":3,"sources":["app/Input.js","app/Countdown.js","app/GenderDisplay.js","app/Display.js","app/index.js","serviceWorker.js","index.js"],"names":["Input","baby","useState","gender","setGender","onChange","useCallback","e","target","value","onSave","set","type","checked","onClick","Countdown","initialCount","onCountdownEnd","counter","setCounter","useEffect","setTimeout","s","COLOR_MAP","boy","girl","GenderDisplay","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","className","active","Display","startCountdown","setStartCountdown","hideRevealButton","setHideRevealButton","onButtonClick","reveal","a","get","doc","data","toLowerCase","getData","firebase","apiKey","process","authDomain","projectId","collection","App","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f6f913e.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\n\nfunction Input({ baby }) {\n  const [gender, setGender] = useState(\"\");\n  const onChange = useCallback((e) => {\n    setGender(e.target.value);\n  }, []);\n  const onSave = useCallback(() => {\n    baby.set({\n      gender,\n    });\n  }, [baby, gender]);\n\n  return (\n    <div>\n      <label>\n        <input\n          type=\"radio\"\n          value=\"boy\"\n          checked={gender === \"boy\"}\n          onChange={onChange}\n        />\n        Boy\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          value=\"girl\"\n          checked={gender === \"girl\"}\n          onChange={onChange}\n        />\n        Girl\n      </label>\n      <button type=\"submit\" onClick={onSave}>\n        Save\n      </button>\n    </div>\n  );\n}\n\nexport default Input;\n","import React, { useState, useEffect } from \"react\";\n\nexport default function Countdown({ initialCount = 10, onCountdownEnd }) {\n  const [counter, setCounter] = useState(initialCount);\n  useEffect(() => {\n    if (counter === 0) {\n      return onCountdownEnd();\n    }\n    setTimeout(() => {\n      setCounter((s) => s - 1);\n    }, 1000);\n  }, [counter, onCountdownEnd]);\n  return <p>{counter}</p>;\n}\n","import React from \"react\";\nimport Confetti from \"react-dom-confetti\";\n\nconst COLOR_MAP = {\n  boy: [\"#9CC5F0\", \"#4061D6\", \"#539EEE\", \"#40B0D6\", \"#417CBA\"],\n  girl: [\"#FF845C\", \"#E86354\", \"#FF697F\", \"#E854B4\", \"#F25CFF\"],\n};\n\nexport default function GenderDisplay({ gender }) {\n  const config = {\n    angle: 360,\n    spread: 360,\n    startVelocity: 40,\n    elementCount: 300,\n    dragFriction: 0.12,\n    duration: 20000,\n    stagger: 3,\n    width: \"10px\",\n    height: \"10px\",\n    perspective: \"500px\",\n    colors: COLOR_MAP[gender],\n  };\n  return (\n    <div>\n      {gender && <p>{`Baby is ${gender}`}</p>}\n      <Confetti className=\"confetti\" active={!!gender} config={config} />\n      <Confetti className=\"confetti\" active={!!gender} config={config} />\n    </div>\n  );\n}\n","import React, { useState, useCallback } from \"react\";\nimport Countdown from \"./Countdown\";\nimport GenderDisplay from \"./GenderDisplay\";\n\nconst COUNTDOWN_SECONDS = 3;\n\nexport default function Display({ baby }) {\n  const [gender, setGender] = useState(\"\");\n  const [startCountdown, setStartCountdown] = useState(false);\n  const [hideRevealButton, setHideRevealButton] = useState(false);\n  const onButtonClick = useCallback(() => {\n    setStartCountdown(true);\n    setHideRevealButton(true);\n  }, []);\n\n  const reveal = useCallback(() => {\n    setStartCountdown(false);\n    const getData = async function () {\n      const doc = await baby.get();\n      setGender(doc.data()?.gender.toLowerCase());\n    };\n    getData();\n  }, [baby]);\n\n  return (\n    <div className=\"container\">\n      {!hideRevealButton && <button onClick={onButtonClick}>Reveal</button>}\n      {startCountdown && (\n        <Countdown initialCount={COUNTDOWN_SECONDS} onCountdownEnd={reveal} />\n      )}\n      <GenderDisplay gender={gender} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport Input from \"./Input\";\nimport Display from \"./Display\";\n\nfirebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n});\nconst db = firebase.firestore();\nconst baby = db.collection(\"babies\").doc(\"1\");\n\nexport default function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/input\">\n          <Input baby={baby} />\n        </Route>\n        <Route path=\"/\">\n          <Display baby={baby} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}