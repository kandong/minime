{"version":3,"sources":["app/Input.js","app/Countdown.js","app/GenderDisplay.js","app/Display.js","app/index.js","serviceWorker.js","index.js"],"names":["Input","baby","useState","gender","setGender","saveSuccess","setSaveSuccess","onChange","useCallback","e","target","value","onSave","a","set","updateGender","className","type","checked","onClick","Countdown","initialCount","onCountdownEnd","counter","setCounter","useEffect","setTimeout","s","COLOR_MAP","boy","girl","GenderDisplay","config","angle","spread","startVelocity","elementCount","dragFriction","duration","stagger","width","height","perspective","colors","text","split","map","l","active","Display","startCountdown","setStartCountdown","hideReveal","setHideReveal","onButtonClick","reveal","get","doc","data","toLowerCase","getData","firebase","apiKey","process","authDomain","projectId","collection","App","basename","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1ad97abc.chunk.js","sourcesContent":["import React, { useState, useCallback } from \"react\";\n\nfunction Input({ baby }) {\n  const [gender, setGender] = useState(\"\");\n  const [saveSuccess, setSaveSuccess] = useState(null);\n  const onChange = useCallback((e) => {\n    setGender(e.target.value);\n    setSaveSuccess(null);\n  }, []);\n  const onSave = useCallback(() => {\n    const updateGender = async () => {\n      try {\n        await baby.set({\n          gender,\n        });\n        setSaveSuccess(true);\n        setGender(\"\");\n      } catch (error) {\n        setSaveSuccess(false);\n      }\n    };\n    updateGender();\n  }, [baby, gender]);\n\n  return (\n    <div className=\"input-container\">\n      <p>Please select a gender option:</p>\n      <label>\n        <input\n          type=\"radio\"\n          value=\"boy\"\n          checked={gender === \"boy\"}\n          onChange={onChange}\n        />\n        Boy\n      </label>\n      <label>\n        <input\n          type=\"radio\"\n          value=\"girl\"\n          checked={gender === \"girl\"}\n          onChange={onChange}\n        />\n        Girl\n      </label>\n      <button className=\"input-submit-btn\" type=\"submit\" onClick={onSave}>\n        Save\n      </button>\n      {saveSuccess !== null && (\n        <p>{`${\n          saveSuccess ? \"Saved Successfully!\" : \"There was an error...\"\n        }`}</p>\n      )}\n    </div>\n  );\n}\n\nexport default Input;\n","import React, { useState, useEffect } from \"react\";\n\nexport default function Countdown({\n  initialCount = 10,\n  onCountdownEnd = () => {},\n}) {\n  const [counter, setCounter] = useState(initialCount);\n  useEffect(() => {\n    if (counter === 0) {\n      return onCountdownEnd();\n    }\n    setTimeout(() => {\n      setCounter((s) => s - 1);\n    }, 1000);\n  }, [counter, onCountdownEnd]);\n  return (\n    <p\n      className={`counter ${\n        counter % 2 === 0 ? \"gender-text-girl\" : \"gender-text-boy\"\n      }`}\n    >\n      {counter ? counter : ''}\n    </p>\n  );\n}\n","import React from \"react\";\nimport Confetti from \"react-dom-confetti\";\n\nconst COLOR_MAP = {\n  boy: [\n    \"#9CC5F0\",\n    \"#4061D6\",\n    \"#539EEE\",\n    \"#40B0D6\",\n    \"#417CBA\",\n    \"#BFCBED\",\n    \"#5769A0\",\n    \"#023059\",\n    \"#D5E5F2\",\n    \"#0090FF\",\n  ],\n  girl: [\n    \"#FF845C\",\n    \"#E86354\",\n    \"#FF697F\",\n    \"#E854B4\",\n    \"#F25CFF\",\n    \"#FB8CAA\",\n    \"#A6606D\",\n    \"#F29999\",\n    \"#E04059\",\n    \"#F2BDBD\",\n  ],\n};\n\nexport default function GenderDisplay({ gender }) {\n  const config = {\n    angle: 360,\n    spread: 360,\n    startVelocity: 40,\n    elementCount: 400,\n    dragFriction: 0.12,\n    duration: 20000,\n    stagger: 3,\n    width: \"10px\",\n    height: \"10px\",\n    perspective: \"500px\",\n    colors: COLOR_MAP[gender],\n  };\n  const text = `It's a ${gender}!`;\n  return (\n    <div>\n      {gender && (\n        <p\n          className={`gender-text ${\n            gender === \"boy\" ? \"gender-text-boy\" : \"gender-text-girl\"\n          }`}\n        >\n          {text.split(\"\").map((l) => (\n            <span>{l}</span>\n          ))}\n        </p>\n      )}\n      <Confetti className=\"confetti\" active={!!gender} config={config} />\n    </div>\n  );\n}\n","import React, { useState, useCallback } from \"react\";\nimport Countdown from \"./Countdown\";\nimport GenderDisplay from \"./GenderDisplay\";\n\nconst COUNTDOWN_SECONDS = 10;\n\nexport default function Display({ baby }) {\n  const [gender, setGender] = useState(\"\");\n  const [startCountdown, setStartCountdown] = useState(false);\n  const [hideReveal, setHideReveal] = useState(false);\n  const onButtonClick = useCallback(() => {\n    setStartCountdown(true);\n    setHideReveal(true);\n  }, []);\n\n  const reveal = useCallback(() => {\n    setStartCountdown(false);\n    const getData = async function () {\n      const doc = await baby.get();\n      setGender(doc.data()?.gender.toLowerCase());\n    };\n    getData();\n  }, [baby]);\n\n  return (\n    <div className=\"container\">\n      {!hideReveal && (\n        <div className=\"text-container\">\n          <h1 className=\"question-text\">What's cooking?</h1>\n          <button className=\"reveal-btn\" onClick={onButtonClick}>\n            Reveal\n          </button>\n        </div>\n      )}\n      {startCountdown && (\n        <Countdown initialCount={COUNTDOWN_SECONDS} onCountdownEnd={reveal} />\n      )}\n      <GenderDisplay gender={gender} />\n    </div>\n  );\n}\n","import React from \"react\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport * as firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport Input from \"./Input\";\nimport Display from \"./Display\";\n\nfirebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n});\nconst db = firebase.firestore();\nconst baby = db.collection(\"babies\").doc(\"1\");\n\nexport default function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path=\"/input\">\n          <Input baby={baby} />\n        </Route>\n        <Route path=\"/\">\n          <Display baby={baby} />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}